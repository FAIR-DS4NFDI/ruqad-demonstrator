---
metadata:
  crawler-version: 0.9.2
  macros:
---
Converters:
  ELNFile:
    converter: ELNFileConverter
    package: caoscrawler.converters
  ROCrateEntity:
    converter: ROCrateEntityConverter
    package: caoscrawler.converters
  ZipFileConverter:
    converter: ZipFileConverter
    package: caoscrawler.converters
  JSONFileConverter:
    converter: JSONFileConverter
    package: caoscrawler.converters
Transformers:
  cast_metadata_type:
    function: cast_metadata_type
    package: ruqad.crawler_extensions.transformers



DataDir:
  type: Directory
  match: .*
  subtree:
    DataDir:
      type: Directory
      match: ^ruqad$
      subtree:
        DataDir:
          type: Directory
          match: ^[0-9]+$
          records:
            QualityCheck:
              FAIRMetadataCheck: true
              FAIRPIDCheck: false
              FAIRLicenseCheck: false
              FAIRProvenanceCheck: false
          subtree:
            QualityReportFile:
              type: ZipFileConverter
              match: ^report\.zip$
              transform:
                elnfilename:
                  in: $QualityReportFile
                  out: $ELNFile
                  functions:
                  - replace:
                      remove: report.zip
                      insert: export.eln
              subtree:
                SummaryFile:
                  type: JSONFileConverter
                  match: ^qc_summary.json$
                  subtree:
                    SubTree:
                      type: Dict
                      match: .*
                      subtree:
                        CheckCounts:
                          match: check_counts
                          type: Dict
                          match_properties:
                            num_total_checks: ^(?P<num_total>[0-9]+)$
                            num_passing_checks: ^(?P<num_passing>[0-9]+)$
                          transform:
                            cast_num_total_to_int:
                              in: $num_total
                              out: $num_total
                              functions:
                                - cast_to_int:
                            cast_num_passing_to_int:
                              in: $num_passing
                              out: $num_passing
                              functions:
                                - cast_to_int:
                          records:
                            QualityCheck:
                              numTotalChecks: $num_total
                              numPassingChecks: $num_passing
              records:
                ELNFileElement:
                  parents:
                  - ELNFile
                  role: File
                  file: $ELNFile
                  path: $ELNFile
                QualityReportFileElement:
                  parents:
                  - QualityReportFile
                  role: File
                  file: $QualityReportFile
                  path: $QualityReportFile
                QualityCheck:
                  ELNFile: $ELNFileElement
                  QualityReportFile: $QualityReportFileElement
            ELNFile:
              type: ELNFile
              match: ^.*\.eln$
              records:
                ELNFileElement:
                  parents:
                  - ELNFile
                  role: File
                  file: $ELNFile
                  path: $ELNFile

                QualityCheck:
                  ELNFile: $ELNFileElement

                Dataset:
                  ELNFile: $ELNFileElement
                  QualityCheck: $QualityCheck
              subtree:
                AuthorDataset:
                  type: ROCrateEntity
                  match_entity_type: Person
                  match_properties:
                    name: (?P<name>.*)$
                    "@id": (?P<url>.*)$
                  records:
                    Author:
                      url: $url
                      name: $name
                RootDataset:
                  type: ROCrateEntity
                  # match_entity_type: Dataset
                  match_properties:
                    "@id": \./$
                  subtree:

                    License:
                      type: TextElement
                      match_name: license
                      match_value: ^(?P<license>.*)$
                      records:
                        QualityCheck:
                          FAIRLicenseCheck: true
                        Dataset:
                          license: $license
                    Dataset:

                      type: ROCrateEntity
                      match_entity_type: Dataset
                      match_properties:
                        "@id": .*/$
                        name: (?P<name>.*)
                        dateCreated: (?P<dateCreated>.*)$
                        dateModified: (?P<dateModified>.*)$
                      records:
                        Dataset:
                          name: $name
                          description: $description
                          dateModified: $dateModified
                          dateCreated: $dateCreated

                          # QualityReportFile: $QualityReportFileElement  # reference not possible on this level

                      subtree:

                        Description:
                          type: DictElement
                          match_name: description
                          subtree:
                            DescriptionString:
                              type: TextElement
                              match_name: text
                              match_value: (?P<text>.*)$
                              records:
                                Dataset:
                                  description: $text
                        VariableMeasured:
                          type: ListElement
                          match_name: variableMeasured
                          subtree:

                            MetaData:
                              type: DictElement
                              match_properties:
                                propertyID: (?P<propid>.*)$
                                value: (?P<propvalue>.*)$

                              transform:
                                cast_voltage_type:
                                  in: $propvalue
                                  out: $propvalue
                                  functions:
                                  - cast_metadata_type:
                                      out_type: float
                                      var_name: $propid
                                      var_value: voltage
                                cast_rating_type:
                                  in: $propvalue
                                  out: $propvalue
                                  functions:
                                  - cast_metadata_type:
                                      out_type: int
                                      var_name: $propid
                                      var_value: rating
                              records:
                                Dataset:
                                  $propid: $propvalue
                        Author:
                          # breakpoint: true
                          type: DictElement
                          match_name: author
                          match_value: .*
                          subtree:
                            AuthorID:
                              match_name: "@id"
                              type: TextElement
                              match_value: ^(?P<url>(?P<repo>https?://.*?)(/users/)(?P<unr>[0-9]+))$
                              transform:
                                cast_nr_type:
                                  in: $unr
                                  out: $unr
                                  functions:
                                  - cast_to_int:
                              records:
                                Author:
                                  nr: $unr
                                  url: $url
                                Repository:
                                  url: $repo
                                Dataset:
                                  Author: $Author
                                  Repository: $Repository
                                QualityCheck:
                                  FAIRProvenanceCheck: true

